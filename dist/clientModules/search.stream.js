// Generated by CoffeeScript 1.10.0

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var query, queryOptionHelpers, retsHttp, retsParsing, searchRets, through2;

  through2 = require('through2');

  queryOptionHelpers = require('../utils/queryOptions');

  retsHttp = require('../utils/retsHttp');

  retsParsing = require('../utils/retsParsing');


  /*
   * Invokes RETS search operation and streams the resulting XML.
   *
   * @param _queryOptions Search query options.
   *    See RETS specification for query options.
   *
   *    Default values for query params:
   *
   *       queryType:'DMQL2',
   *       format:'COMPACT-DECODED',
   *       count:1,
   *       standardNames:0,
   *       restrictedIndicator:'***',
   *       limit:"NONE"
   * @param headerInfoCallback optional callback to receive response header info
   *
   */

  searchRets = function(queryOptions, headerInfoCallback) {
    return Promise["try"]((function(_this) {
      return function() {
        var finalQueryOptions, httpStream, onError, resultStream;
        finalQueryOptions = queryOptionHelpers.normalizeOptions(queryOptions);
        resultStream = through2();
        onError = function(err) {
          httpStream.unpipe(resultStream);
          return resultStream.emit('error', err);
        };
        if (!headerInfoCallback) {
          headerInfoCallback = function() {};
        }
        httpStream = retsHttp.streamRetsMethod('search', _this.retsSession, finalQueryOptions, onError, headerInfoCallback);
        return httpStream.pipe(resultStream);
      };
    })(this));
  };


  /*
   *
   * Helper that performs a targeted RETS query and streams parsed (or semi-parsed) results
   *
   * @param searchType Rets resource type (ex: Property)
   * @param classType Rets class type (ex: RESI)
   * @param query Rets query string. See RETS specification - (ex: MatrixModifiedDT=2014-01-01T00:00:00.000+)
   * @param options Search query options (optional).
   *    See RETS specification for query options.
   * @param rawData flag indicating whether to skip parsing of column and data elements.
   *
   *    Default values for query params:
   *
   *       queryType:'DMQL2',
   *       format:'COMPACT-DECODED',
   *       count:1,
   *       standardNames:0,
   *       restrictedIndicator:'***',
   *       limit:"NONE"
   *
   *       Please note that queryType and format are immutable.
   */

  query = function(resourceType, classType, queryString, options, rawData) {
    var baseOpts, context, finalQueryOptions, queryOptions;
    if (options == null) {
      options = {};
    }
    if (rawData == null) {
      rawData = false;
    }
    baseOpts = {
      searchType: resourceType,
      "class": classType,
      query: queryString
    };
    queryOptions = queryOptionHelpers.mergeOptions(baseOpts, options);
    delete queryOptions.queryType;
    delete queryOptions.format;
    finalQueryOptions = queryOptionHelpers.normalizeOptions(queryOptions);
    context = retsParsing.getStreamParser(null, rawData);
    retsHttp.streamRetsMethod('search', this.retsSession, finalQueryOptions, context.fail, context.response).pipe(context.parser);
    return context.retsStream;
  };

  module.exports = function(_retsSession) {
    if (!_retsSession) {
      throw new Error('System data not set; invoke login().');
    }
    return {
      retsSession: _retsSession,
      query: query,
      searchRets: searchRets
    };
  };

}).call(this);
