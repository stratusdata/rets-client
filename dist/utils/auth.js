// Generated by CoffeeScript 1.10.0

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Promise, headersHelper, login, logout, retsHttp, retsParsing;

  Promise = require('bluebird');

  retsParsing = require('./retsParsing');

  retsHttp = require('./retsHttp');

  headersHelper = require('./headers');


  /*
   * Executes RETS login routine.
   */

  login = function(retsSession) {
    return retsHttp.callRetsMethod('login', Promise.promisify(retsSession), {}).then(function(retsResponse) {
      return new Promise(function(resolve, reject) {
        var gotData, headers, retsParser, systemData;
        headers = headersHelper.processHeaders(retsResponse.response.rawHeaders);
        systemData = {
          retsVersion: headers.retsVersion,
          retsServer: headers.server
        };
        retsParser = retsParsing.getSimpleParser(reject, headers);
        gotData = false;
        retsParser.parser.on('text', function(text) {
          var i, keyVal, keyVals, len, results, split;
          if (retsParser.currElementName !== 'RETS-RESPONSE') {
            return;
          }
          gotData = true;
          keyVals = text.split('\r\n');
          results = [];
          for (i = 0, len = keyVals.length; i < len; i++) {
            keyVal = keyVals[i];
            split = keyVal.split(/\s{0,}=\s{0,}/);
            if (split.length > 1) {
              results.push(systemData[split[0]] = split[1]);
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
        retsParser.parser.on('endElement', function(name) {
          if (name !== 'RETS') {
            return;
          }
          retsParser.finish();
          if (!gotData) {
            return reject(new Error('Failed to parse data'));
          } else {
            return resolve(systemData);
          }
        });
        retsParser.parser.write(retsResponse.body);
        return retsParser.parser.end();
      });
    });
  };


  /*
   * Logouts RETS user
   */

  logout = function(retsSession) {
    return retsHttp.callRetsMethod('logout', Promise.promisify(retsSession), {});
  };

  module.exports = {
    login: login,
    logout: logout
  };

}).call(this);
