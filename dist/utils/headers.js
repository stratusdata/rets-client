// Generated by CoffeeScript 1.10.0

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var _camelize, _setValue, processHeaders;

  _camelize = function(str) {
    return str.replace(/([A-Z]{2,})/g, function(match) {
      return match[0].toUpperCase() + match.slice(1).toLowerCase();
    }).replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function(match, index) {
      if (+match === 0) {
        return '';
      }
      if (index === 0) {
        return match.toLowerCase();
      } else {
        return match.toUpperCase();
      }
    }).replace(/\W/g, '');
  };

  _setValue = function(obj, key, value) {
    if (obj[key] == null) {
      return obj[key] = value;
    } else if (typeof obj[key] === 'string') {
      return obj[key] = [obj[key], value];
    } else {
      return obj[key].push(value);
    }
  };

  processHeaders = function(headers) {
    var disposition, dispositions, end, field, fieldLower, headerInfo, i, j, k, l, len, len1, len2, objectData, objectDataArray, od, paramName, paramValue, ref, split, value;
    if (headers == null) {
      return {};
    }
    if (!Array.isArray(headers)) {
      return headers;
    }
    headerInfo = {};
    for (i = j = 0, len = headers.length; j < len; i = j += 2) {
      field = headers[i];
      value = headers[i + 1];
      fieldLower = field.toLowerCase();
      if (fieldLower === 'content-disposition') {
        dispositions = value.split(/\s*;\s*/);
        for (i = k = 0, len1 = dispositions.length; k < len1; i = ++k) {
          disposition = dispositions[i];
          if (i === 0) {
            _setValue(headerInfo, 'dispositionType', disposition);
          } else {
            split = disposition.indexOf('=');
            if (split > -1) {
              paramName = disposition.substr(0, split);
              if (disposition.charAt(split + 1) === '"') {
                split++;
              }
              end = disposition.length;
              if (disposition.charAt(disposition.length - 1) === '"') {
                end--;
              }
              paramValue = disposition.substring(split + 1, end);
              _setValue(headerInfo, _camelize(paramName), paramValue);
            }
          }
        }
      } else if (fieldLower === 'content-transfer-encoding') {
        _setValue(headerInfo, 'transferEncoding', value.toLowerCase());
      } else {
        _setValue(headerInfo, _camelize(field), value);
      }
    }
    if (headerInfo.objectData != null) {
      if (Array.isArray(headerInfo.objectData)) {
        objectDataArray = headerInfo.objectData;
      } else {
        objectDataArray = [headerInfo.objectData];
      }
      objectData = {};
      ref = headerInfo.objectData;
      for (l = 0, len2 = ref.length; l < len2; l++) {
        od = ref[l];
        split = od.indexOf('=');
        _setValue(objectData, _camelize(od.substr(0, split)), od.substr(split + 1));
      }
      headerInfo.objectData = objectData;
    }
    return headerInfo;
  };

  module.exports.processHeaders = processHeaders;

}).call(this);
