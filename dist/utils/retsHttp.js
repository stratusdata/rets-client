// Generated by CoffeeScript 1.10.0

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Promise, callRetsMethod, debug, errors, expat, headersHelper, streamRetsMethod;

  Promise = require('bluebird');

  debug = require('debug')('rets-client:main');

  expat = require('node-expat');

  errors = require('./errors');

  headersHelper = require('./headers');

  callRetsMethod = function(methodName, retsSession, queryOptions) {
    debug("RETS " + methodName + ":", queryOptions);
    return Promise["try"](function() {
      return retsSession({
        qs: queryOptions
      });
    })["catch"](function(error) {
      debug("RETS " + methodName + " error:", error);
      return Promise.reject(error);
    }).spread(function(response, body) {
      var error;
      if (response.statusCode !== 200) {
        error = new errors.RetsServerError(methodName, response.statusCode, response.statusMessage, response.rawHeaders);
        debug("RETS " + methodName + " error: " + error.message);
        return Promise.reject(error);
      }
      return {
        body: body,
        response: response,
        headerInfo: headersHelper.processHeaders(response.rawHeaders)
      };
    });
  };

  streamRetsMethod = function(methodName, retsSession, queryOptions, failCallback, responseCallback) {
    var done, errorHandler, responseHandler, stream;
    debug("RETS " + methodName + " (streaming)", queryOptions);
    done = false;
    errorHandler = function(error) {
      if (done) {
        return;
      }
      done = true;
      debug("RETS " + methodName + " error:", error);
      return failCallback(error);
    };
    responseHandler = function(response) {
      var error;
      if (done) {
        return;
      }
      done = true;
      if (response.statusCode !== 200) {
        error = new errors.RetsServerError('search', response.statusCode, response.statusMessage, response.rawHeaders);
        debug("RETS " + methodName + " error: " + error.message);
        return failCallback(error);
      } else if (responseCallback) {
        return responseCallback(response);
      }
    };
    stream = retsSession({
      qs: queryOptions
    });
    stream.on('error', errorHandler);
    return stream.on('response', responseHandler);
  };

  module.exports = {
    callRetsMethod: callRetsMethod,
    streamRetsMethod: streamRetsMethod
  };

}).call(this);
