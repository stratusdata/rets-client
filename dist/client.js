// Generated by CoffeeScript 1.10.0

/* jshint node:true */


/* jshint -W097 */

(function() {
  'use strict';
  var Client, Promise, URL_KEYS, auth, crypto, metadata, normalizeUrl, object, request, search;

  crypto = require('crypto');

  request = require('request');

  Promise = require('bluebird');

  metadata = require('./clientModules/metadata');

  search = require('./clientModules/search');

  object = require('./clientModules/object');

  auth = require('./utils/auth');

  normalizeUrl = require('./utils/normalizeUrl');

  URL_KEYS = {
    GET_METADATA: "GetMetadata",
    GET_OBJECT: "GetObject",
    SEARCH: "Search",
    UPDATE: "Update",
    ACTION: "Action",
    LOGIN: "Login",
    LOGOUT: "Logout"
  };

  Client = (function() {
    function Client(_settings) {
      var a1, debugRequest, defaults, key, retsUaAuth, val;
      this.settings = {};
      for (key in _settings) {
        val = _settings[key];
        this.settings[key] = val;
      }
      this.headers = {
        'User-Agent': "Node-Rets/1.0",
        'RETS-Version': this.settings.version || 'RETS/1.7.2'
      };
      if (this.settings.userAgent) {
        this.headers['User-Agent'] = this.settings.userAgent;
        if (this.settings.userAgentPassword) {
          a1 = crypto.createHash('md5').update([this.settings.userAgent, this.settings.userAgentPassword].join(":")).digest('hex');
          retsUaAuth = crypto.createHash('md5').update([a1, "", this.settings.sessionId || "", this.settings.version || headers['RETS-Version']].join(":")).digest('hex');
          this.headers['RETS-UA-Authorization'] = "Digest " + retsUaAuth;
        }
      }
      debugRequest = require('debug')('rets-client:request');
      if (debugRequest.enabled) {
        require('request-debug')(request, function(type, data) {
          return debugRequest(type + ":", data);
        });
      }
      if ('requestDebugFunction' in this.settings) {
        require('request-debug')(request, this.settings.requestDebugFunction);
      }
      defaults = {
        jar: request.jar(),
        headers: this.headers
      };
      if (this.settings.username && this.settings.password) {
        defaults.auth = {
          'user': this.settings.username,
          'pass': this.settings.password,
          'sendImmediately': false
        };
      }
      if (this.settings.proxyUrl) {
        defaults.proxy = this.settings.proxyUrl;
      }
      this.baseRetsSession = request.defaults(defaults);
    }

    Client.prototype.login = function() {
      var options;
      options = {
        uri: this.settings.loginUrl
      };
      return auth.login(this.baseRetsSession.defaults(options)).then((function(_this) {
        return function(systemData) {
          var key, val;
          _this.systemData = systemData;
          _this.urls = {};
          for (key in URL_KEYS) {
            val = URL_KEYS[key];
            if (_this.systemData[val]) {
              _this.urls[val] = normalizeUrl(_this.systemData[val], _this.settings.loginUrl);
            }
          }
          _this.metadata = metadata(_this.baseRetsSession.defaults({
            uri: _this.urls[URL_KEYS.GET_METADATA]
          }));
          _this.search = search(_this.baseRetsSession.defaults({
            uri: _this.urls[URL_KEYS.SEARCH]
          }));
          _this.objects = object(_this.baseRetsSession.defaults({
            uri: _this.urls[URL_KEYS.GET_OBJECT]
          }));
          _this.logoutRequest = _this.baseRetsSession.defaults({
            uri: _this.urls[URL_KEYS.LOGOUT]
          });
          return _this;
        };
      })(this));
    };

    Client.prototype.logout = function() {
      return auth.logout(this.logoutRequest);
    };

    return Client;

  })();

  Client.getAutoLogoutClient = function(settings, handler) {
    return Promise["try"](function() {
      var client;
      client = new Client(settings);
      return client.login().then(function() {
        return Promise["try"](function() {
          return handler(client);
        })["finally"](function() {
          return client.logout();
        });
      });
    });
  };

  module.exports = Client;

}).call(this);
